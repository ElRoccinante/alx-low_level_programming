!<arch>
0-isupper.c/    0           0     0     644     265       `
#include "main.h"
/**
 * _isupper - checks if a character is a lowercase letter in ASCII
 * @c: the character to check
 *
 * Return: 1 if c is a lowercase letter, 0 otherwise
 */
int _isupper(int c)
{
	if (c >= 65  && c <= 90)
	return (1);
	else
{
	return (0);
}
}

0-memset.c/     0           0     0     644     326       `
#include "main.h"
/**
 * _memset - function that fills the first n bytes of the memory.
 * @n: number of bytes
 * @b: constant byte
 * @s: memory area //zakaria elaroussi
 * Return: s pointer to the memory
 */
char *_memset(char *s, char b, unsigned int n)
{
unsigned int i = 0;
while (i < n)
{
s[i] = b;
i++;
}
return (s);
}
0-strcat.c/     0           0     0     644     362       `
#include "main.h"
/**
 * _strcat - function that concatenates two strings.
 *
 * @dest: pointer to destnation input
 * @src: pointer to source input
 *
 * Return: pointer to resulting string @dest
 */
char *_strcat(char *dest, char *src)
{
char *ptr = dest;
while (*ptr != '\0')
{
ptr++;
}
while (*src != '\0')
{
*ptr++ = *src++;
}
*ptr = '\0';
return (dest);
}
100-atoi.c/     0           0     0     644     594       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 *
 * Return: the int converted from the string
 */
int _atoi(char *s)
{
	int i, d, n, len, f, digit;

	i = 0;
	d = 0;
	n = 0;
	len = 0;
	f = 0;
	digit = 0;

	while (s[len] != '\0')
		len++;

	while (i < len && f == 0)
	{
		if (s[i] == '-')
			++d;

		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';
			if (d % 2)
				digit = -digit;
			n = n * 10 + digit;
			f = 1;
			if (s[i + 1] < '0' || s[i + 1] > '9')
				break;
			f = 0;
		}
		i++;
	}

	if (f == 0)
		return (0);

	return (n);
}
1-isdigit.c/    0           0     0     644     249       `
#include "main.h"
/**
 * _isdigit - checks if a digit or otherwise in ASCII
 * @c: the character to check
 *
 * Return: 1 if c is a digit, 0 otherwise
 *
 */

int _isdigit(int c)
{
if (c >= 48 && c <= 57)

{
	return (1);
}

else

{
	return (0);
}
}

1-memcpy.c/     0           0     0     644     368       `
#include "main.h"
/**
 * *_memcpy - function that copies memory area.
 * @dest: This is a pointer to the destination
 * @src: This is a pointer to the source
 * @n: number of bytes to be copied //zakaria elaroussi
 * Return: dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i = 0;
while (i < n)
{
dest[i] = src[i];
i++;
}
return (dest);
}
1-strncat.c/    0           0     0     644     498       `
#include "main.h"

/**
 * _strncat - a function that concatenates two strings.
 * @dest: an input string
 * @src: an input string
 * @n: an input integer
 * Return: A pointer to the resulting string
 */
char *_strncat(char *dest, char *src, int n)
{
	int srclen = 0, i = 0;
	char *temp = dest, *start = src;

	while (*src)
	{
		srclen++;
		src++;
	}

	while (*dest)
		dest++;

	if (n > srclen)
		n = srclen;

	src = start;

	for (; i < n; i++)
		*dest++ = *src++;

	*dest = '\0';
	return (temp);
}
2-strchr.c/     0           0     0     644     327       `
#include "main.h"
/**
 * *_strchr - function that locates a character in a string.
 * @s: This is a pointer to the string
 * @c: This is the character //Zakaria Elaroussi
 * Return: NULL
 */

char *_strchr(char *s, char c)
{
while (*s != '\0')
{
if (*s == c)
{
return (s);
}
s++;
}
if (c == '\0')
{
return (s);
}
return (0);
}

2-strlen.c/     0           0     0     644     209       `
#include "main.h"
#include <stdio.h>

/**
 * _strlen - returns the length of a string
 *@s: type char
 * Return: Always 0.
 */
int _strlen(char *s)
{
{
int i = 0;
while (s[i] != '\0')
{
i++;
}
return (i);
}
}

2-strncpy.c/    0           0     0     644     377       `
#include "main.h"
/**
 * _strncpy - A function that copies a string.
 *
 * @dest: pointer to destination input buffer
 * @src: pointer to source input buffer
 * @n: bytes of @src
 *
 * Return: @dest
 */
char *_strncpy(char *dest, char *src, int n)
{
int i;
for (i = 0; i < n && src[i] != '\0'; i++)
{
dest[i] = src[i];
}
while (i < n)
{
dest[i] = '\0';
i++;
}
return (dest);
}

3-islower.c/    0           0     0     644     262       `
#include "main.h"
/**
 * _islower - checks if a character is a lowercase letter in ASCII
 * @c: the character to check
 *
 * Return: 1 if c is a lowercase letter, 0 otherwise
 */
int _islower(int c)
{
	if (c >= 97  && c <= 122)
	return (1);
	else
	return (0);
}
3-puts.c/       0           0     0     644     207       `
#include "main.h"
/**
 * _puts - prints a string to stdout
 * @str: pointer to the string to print
 */
void _puts(char *str)
{
int i;
for (i = 0; str[i] != '\0'; i++)
{
_putchar(str[i]);
}
_putchar('\n');
}

3-strcmp.c/     0           0     0     644     318       `
#include "main.h"

/**
 * _strcmp - a function that compares two strings.
 * @s1: an input string
 * @s2: an input string //zakaria elaroussi
 * Return: The difference s1 - s2
 */
int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s2)
	{
		if (*s1 != *s2)
			return (*s1 - *s2);
		s1++, s2++;
	}
	return (*s1 - *s2);
}
3-strspn.c/     0           0     0     644     438       `
#include "main.h"
/**
 * _strspn - function that gets the length of a prefix substring.
 * @s: This is a pointer to the string
 * @accept: This is a pointer to the string  //Zakaria Elaroussi
 * Return: count
 */

unsigned int _strspn(char *s, char *accept)
{
unsigned int i = 0, j = 0, count = 0;
while (s[i])
{
while (accept[j])
{
if (s[i] == accept[j])
{
count++;
break;
}
j++;
}
if (!accept[j])
break;
i++;
j = 0;
}
return (count);
}
4-isalpha.c/    0           0     0     644     270       `
#include "main.h"

/**
 * _isalpha - checks if a character is lowercase
 * @c: the character to check
 *
 * Return: 1 if c is lowercase or upercase, 0 otherwise
 */
int _isalpha(int c)
{
if ((c >= 97 && c <= 122) || (c >= 65 && c <= 90))
return (1);
else
return (0);
}

4-strpbrk.c/    0           0     0     644     411       `
#include "main.h"
/**
 * *_strpbrk -  function that searches a string for any of a set of bytes.
 * @s: This is a pointer to the string
 * @accept: This is a pointer to the string  //Zakaria Elaroussi
 * Return: NULL
 */

char *_strpbrk(char *s, char *accept)
{
int j = 0;
int i = 0;
while (s[i] != '\0')
{
i++;
for (j = 0; accept[j] != '\0'; j++)
{
if (s[i] == accept[j])
{
return (&s[i]);
}
}
}
return (0);
}

5-strstr.c/     0           0     0     644     428       `
#include "main.h"

/**
 * *_strstr - function that locates a substring.
 * @haystack: This is a pointer to the string
 * @needle: This is a pointer to the substring  //Zakaria Elaroussi
 * Return: 0
 */

char *_strstr(char *haystack, char *needle)
{
while (*haystack != '\0')
{
char *x = haystack;
char *y = needle;
while (*y != '\0' && *x == *y)
{
x++;
y++;
}
if (*y == '\0')
{
return (haystack);
}
haystack++;
}
return (0);
}
6-abs.c/        0           0     0     644     229       `
#include "main.h"
/**
 * _abs - computes the absolute value of an integer
 * @n: the integer to compute the absolute value of
 *
 * Return: the absolute value of n
 */
int _abs(int n)
{
if (n < 0)
return (-n);
else
return (n);
}

9-strcpy.c/     0           0     0     644     280       `
#include "main.h"
/**
 * *_strcpy - Copies a string to dest
 * @dest: destination pointer
 * @src: source string
 * Return: A string
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

